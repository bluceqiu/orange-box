{"version":3,"sources":["components/CodeBlock.jsx","components/Nav.jsx","docs/阿里某次面试题.md","docs/domReady与onload.md","App.tsx","components/Menu.tsx","index.tsx"],"names":["CodeBlock","SyntaxHighlighter","registerLanguage","jsx","javascript","this","props","language","value","className","style","xonokai","PureComponent","defaultProps","Nav","position","top","right","width","source","headingTopOffset","RMD","require","renderers","code","skipHtml","children","navFn","App","exact","path","domReady与onload","阿里某次面试题","SubMenu","Menu","handleClick","e","console","log","lists","onClick","defaultSelectedKeys","defaultOpenKeys","mode","icon","MailOutlined","title","ItemGroup","Item","to","ReactDOM","render","StrictMode","onBack","backIcon","document","getElementById"],"mappings":"iTAaMA,E,mLAaFC,IAAkBC,iBAAiB,MAAOC,KAC1CF,IAAkBC,iBAAiB,aAAcE,KACjDH,IAAkBC,iBAAiB,KAAME,O,+BAGjC,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,SAAUC,EADX,EACWA,MAClB,OACE,wBAAQC,UAAU,YAAlB,SACE,cAAC,IAAD,CAAmBF,SAAUA,EAAUG,MAAOC,IAA9C,SACGH,U,GAvBaI,iBAAlBZ,EAMGa,aAAe,CACpBN,SAAU,MAsBCP,Q,oCC1BAc,G,OAXH,SAACR,GAAD,OACV,qBAAKI,MAAO,CAAEK,SAAU,WAAYC,IAAK,QAAYC,MAAO,OAAWC,MAAO,SAA9E,SACE,eAAC,IAAD,WACE,qBAAKT,UAAU,gBAAf,sCACA,cAAC,IAAD,CACEA,UAAU,eACVU,OAAQb,GAASA,EAAMa,OACvBC,iBAAkB,YCZX,soRCAA,+eCcTC,GAFMC,EAAQ,KAER,SAACH,GAAD,OACV,cAAC,IAAD,CAAeI,UAAW,CACxBC,KAAMxB,GACLyB,UAAU,EAAMC,SAAUP,MAGzBQ,EAAQ,SAACR,GAAD,OACZ,cAAC,EAAD,CAAKA,OAAQA,KAqBAS,MAjBf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,wBAAlB,UACGT,EAAIU,GACJJ,EAAMI,MAET,eAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,8CAAlB,UACGT,EAAIW,GACJL,EAAMK,Y,0BC7BTC,EAAYC,IAAZD,QAEFE,EAAc,SAACC,GACnBC,QAAQC,IAAI,SAAUF,IAGT,WAACG,GAAD,OACb,cAAC,IAAD,CACEC,QAASL,EACTzB,MAAO,CAAEQ,MAAO,KAChBuB,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,QAClBC,KAAK,SALP,SAOE,cAACV,EAAD,CAAoBW,KAAM,cAACC,EAAA,EAAD,IAAkBC,MAAM,iBAAlD,SACE,eAAC,IAAKC,UAAN,CAAyBD,MAAM,SAA/B,UACE,cAAC,IAAKE,KAAN,UAAmB,cAAC,IAAD,CAAMC,GAAG,wBAAT,mCAAJ,KACf,cAAC,IAAKD,KAAN,UAAmB,cAAC,IAAD,CAAMC,GAAG,8CAAT,yDAAJ,OAFG,OADT,W,uBCVjBC,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,IAAD,CACE3C,UAAU,mBACV4C,OAAQ,kBAAM,MACdC,UAAU,EACVR,MAAM,iBAER,qBAAKrC,UAAU,OAAf,SACE,eAAC,IAAD,WACE,cAACyB,EAAD,IACA,cAAC,EAAD,YAINqB,SAASC,eAAe,W","file":"static/js/main.9eb3aca5.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";\n// 设置高亮样式\nimport { xonokai } from \"react-syntax-highlighter/dist/esm/styles/prism\";\n// 设置高亮的语言\nimport { jsx, javascript, sass, scss } from \"react-syntax-highlighter/dist/esm/languages/prism\";\nimport language from \"react-syntax-highlighter/dist/esm/languages/hljs/1c\";\n\n// interface ICodeBlockProp {\n//   language: string,\n//   value?: string\n// }\nclass CodeBlock extends PureComponent {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    language: PropTypes.string\n  };\n\n  static defaultProps = {\n    language: null\n  };\n\n  componentWillMount() {\n    // 注册要高亮的语法，\n    // 注意：如果不设置打包后供第三方使用是不起作用的\n    SyntaxHighlighter.registerLanguage(\"jsx\", jsx);\n    SyntaxHighlighter.registerLanguage(\"javascript\", javascript);\n    SyntaxHighlighter.registerLanguage(\"js\", javascript);\n  }\n\n  render() {\n    const { language, value } = this.props;\n    return (\n      <figure className=\"highlight\">\n        <SyntaxHighlighter language={language} style={xonokai}>\n          {value}\n        </SyntaxHighlighter>\n      </figure>\n    );\n  }\n}\nexport default CodeBlock;\n\n// declare module 'react-syntax-highlighter/dist/esm/languages/hljs/1c' {\n//   const content: string;\n//   export default content;\n// }","import React from 'react';\nimport { Anchor } from 'antd';\nimport MarkNav from 'markdown-navbar';\nimport 'markdown-navbar/dist/navbar.css';\n\nconst Nav = (props) => (\n  <div style={{ position: 'absolute', top: 100 + 'px', right: 20 + 'px', width: '250px' }}>\n    <Anchor>\n      <div className=\"markNav-title\">文章目录</div>\n      <MarkNav\n        className=\"article-menu\"\n        source={props && props.source}\n        headingTopOffset={80}\n      />\n    </Anchor></div>)\n\nexport default Nav;","export default \"# vue/react开发与jQuery开发有什么区别？\\n1. 开发模式不同、前者为数据驱动视图的MVVM模式、后者是传统的操作dom的开发模式、那个时候多用MVC模式进行项目代码组织\\n\\n# vue/react的dom diff过程，二者有什么差异？\\n1. vue使用了4个指针的技巧来判断新旧vnode之间应该使用什么样的方式来达成转换、react没有这个过程、只是单纯的递归遍历\\n\\n# react hooks的useState相对于有状态组件state区别？\\n1. hooks 是没有副作用的函数式编程的方式、而普通的state就是一个对象来作为数据的存储\\n\\n# DNS解析流程？\\n不知道\\n\\n# TCP/IP协议分层，三次握手四次挥手的状态码，服务端连接队列拥堵时怎么处理，客户端第四次挥手后为什么要等待2MSL时间才转换为close状态？\\n1. TCP属于传输层、IP属于网络层\\n2. 客户端生成一个随机数 -> 服务端收到随机数 + 1 返回并同时返回 syn=1 & 生成一个新的随机数\\n   客户端收到数据、返回给服务端 随机数+1 & syn = 1\\n   服务端收到数据、链接成功\\n3. 更新http协议为http2.0、增设硬件资源、改善网络情况\\n4. MSL(Maximum Segment Lifetime)\\n   - 确保第四次挥手成功、确保服务器能够受到客户端最后的回应。 \\n   - 有可能新、老连接的端口号就是一样的。假设新、老连接端口号一致，若老连接的一些数据仍滞留在网络中，这些滞留数据在新连接建立后才到达服务器，鉴于前后端口号一致，TCP协议就默认这些数据属于新连接，于是数据就这样乱成一锅粥了。所以TCP连接还要在TIME_WAIT状态下等待2MSL，确保所有老连接的数据都在网络中消失！\\n   \\n\\n# 网络通信中引入滑动窗口的作用？\\n不知道\\n- 滑动窗口适应系统\\n- 超时重传机制\\n- 累计ACK\\n\\n# http1.1/2/3差异，有做什么优化？\\n1. http1.1的特性主要是长链接、\\n2. http2.0加入了多路复用、二进制流/帧、服务端推送、\\n3. http3 更改了传输层协议、变为了UDP协议、并增加了UDP一些可靠性的实践\\n\\n# https详细流程，为什么最后会使用对称加密，而不是全过程使用非对称加密？\\n1. https是这TCP上增加了一层SSL/TLS协议层、\\n2. 对称加密的优势是加密速度快、但是有不能安全传输密钥的问题、非对称加密的优势是使用公钥私钥一对密钥的方式、没有传输密钥的问题、但是加密速度慢、\\n   最终结合两者的优势、使用非对称加密传输对称加密的密钥、完成后则一直使用对称加密来传输信息\\n\\n# 服务端高并发问题怎么解决？\\n1. 负载均衡\\n\\n# redis如何得知缓存失效？\\n  不知道\\n\\n# xss/csrf/SQL注入，在前端和后台分别要做什么安全防范工作？\\n1. 客户端对输入框等地方做输入数据校验\\n2. 服务端可以使用动态命令的方式校验用户信息\\n\\n# 从获得HTML到解析页面全流程，为什么栅格线程使用GPU计算而不是CPU计算？\\n1. 因为GPU计算快\\n\\n# 影响首屏加载的因素有哪些，分别如何进行优化，performance有哪些相关的指标？\\n1. 下载的文件大小、网络因素、html页面代码渲染逻辑、页面js逻辑复杂性、css逻辑等\\n2. html逻辑代码放后面、样式文件放前面、使用CDN、dns-prefetch、js逻辑尽量精简为核心逻辑、其它逻辑可以分开放、可以做SSR\\n3. timing\\n\\n# js原型链/执行上下文/闭包/eventloop机制、class的继承和prototype是完全一样的吗，new操作符做了哪些事情？\\n\\n# js常见几种异步代码编写的方式对比（promise/generator/async-await/rxjs）？\\n\\n# js内存回收机制，如何避免内存泄漏？\\n- 意外的全局变量\\n- 被遗忘的计时器或回调函数\\n```js\\nvar someResource = getData();\\nsetInterval(function() {\\n    var node = document.getElementById('Node');\\n    if(node) {\\n        // 处理 node 和 someResource\\n        node.innerHTML = JSON.stringify(someResource));\\n    }\\n}, 1000);\\n```\\n这样的代码很常见，如果id为Node的元素从DOM中移除，该定时器仍会存在，同时，因为回调函数中包含对someResource的引用，定时器外面的someResource也不会被释放。\\n\\n- 没有清理的DOM元素引用\\n## 避免内存泄漏的一些方式：\\n减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收\\n注意程序逻辑，避免“死循环”之类的\\n避免创建过多的对象\\n## 场景\\n- 数组的回收、arr.length = 0;\\n- 对象尽量复用\\n- 复用的函数最好放到循环外面\\n\\n# v8引擎解释执行js代码的详细流程？\\n\\n# WebAssembly有听说过吗？它的优点是什么，使用时需要注意哪些问题？\\n\\n# 项目中可以通过什么方法来避免出现错误？\\n\";","export default \"\\n# domReady与onload 的区别\\ndomReady 其实就是DOMContentLoaded\\n\\n## domReady\\n- dom加载完毕并且解析完毕，可以进行dom操作，此时触发domReady事件\\n\\n## onload\\n- 页面所有的css，js都加载解析完毕，执行onload事件\\n\\n## 结论\\n- DOMContentLoaded 要早于 onload的执行\";","\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Switch, Route } from \"react-router-dom\";\nimport CodeBlock from './components/CodeBlock.jsx';\nimport './App.css';\nimport Nav from './components/Nav.jsx';\n\nimport 阿里某次面试题 from './docs/阿里某次面试题.md';\nimport domReady与onload from './docs/domReady与onload.md';\n\n\nconst gfm = require('remark-gfm')\n\nconst RMD = (source: string) => (\n  <ReactMarkdown renderers={{\n    code: CodeBlock\n  }} skipHtml={true} children={source} />\n);\n\nconst navFn = (source: string) => (\n  <Nav source={source} />\n  // 不能缩写为source\n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/domReady与onload\">\n          {RMD(domReady与onload)}\n          {navFn(domReady与onload)}\n        </Route>\n        <Route exact path='/阿里某次面试题'>\n          {RMD(阿里某次面试题)}\n          {navFn(阿里某次面试题)}\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport React from 'react';\nimport { Menu } from 'antd';\nimport { AppstoreOutlined, MailOutlined, SettingOutlined } from '@ant-design/icons';\nimport { Link } from \"react-router-dom\";\n\nconst { SubMenu } = Menu;\n\nconst handleClick = (e: object): void => {\n  console.log('click ', e);\n};\n\nexport default (lists: object) => (\n  <Menu\n    onClick={handleClick}\n    style={{ width: 256 }}\n    defaultSelectedKeys={['1']}\n    defaultOpenKeys={['sub1']}\n    mode=\"inline\"\n  >\n    <SubMenu key=\"sub1\" icon={<MailOutlined />} title=\"Navigation One\">\n      <Menu.ItemGroup key=\"g1\" title=\"Item 1\">\n        <Menu.Item key=\"1\"><Link to=\"/domReady与onload\">domReady与onload</Link></Menu.Item>\n        <Menu.Item key=\"2\"><Link to=\"/阿里某次面试题\">阿里某次面试题</Link></Menu.Item>\n      </Menu.ItemGroup>\n    </SubMenu>\n  </Menu>\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport Menu from './components/Menu';\nimport { PageHeader } from 'antd';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport 'antd/dist/antd.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PageHeader\n      className=\"site-page-header\"\n      onBack={() => null}\n      backIcon={false}\n      title=\"筆記\"\n    />\n    <div className='page' >\n      <Router>\n        <Menu />\n        <App />\n      </Router>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}